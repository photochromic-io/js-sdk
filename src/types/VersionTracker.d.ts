/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface VersionTrackerInterface extends ethers.utils.Interface {
  functions: {
    "getCurrentVersion()": FunctionFragment;
    "getPhotochromicCore(uint256,uint256)": FunctionFragment;
    "getVersion(uint256,uint256)": FunctionFragment;
    "getVersionForAddress(address,uint8)": FunctionFragment;
    "getVersionMajor()": FunctionFragment;
    "getVersionMinor()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateMajor(address,address,address)": FunctionFragment;
    "updateMinor(address,address,address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getCurrentVersion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPhotochromicCore",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getVersion",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getVersionForAddress",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getVersionMajor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVersionMinor",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMajor",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMinor",
    values: [string, string, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "getCurrentVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPhotochromicCore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getVersion", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getVersionForAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVersionMajor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVersionMinor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMajor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMinor",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export class VersionTracker extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: VersionTrackerInterface;

  functions: {
    getCurrentVersion(
      overrides?: CallOverrides
    ): Promise<
      [
        [number, number, string, string, string] & {
          major: number;
          minor: number;
          coreLocation: string;
          registrarLocation: string;
          resolverLocation: string;
        }
      ]
    >;

    "getPhotochromicCore(uint256,uint256)"(
      major: BigNumberish,
      minor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "getPhotochromicCore()"(overrides?: CallOverrides): Promise<[string]>;

    "getPhotochromicCore(uint256)"(
      major: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "getVersion(uint256,uint256)"(
      major: BigNumberish,
      minor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [number, number, string, string, string] & {
          major: number;
          minor: number;
          coreLocation: string;
          registrarLocation: string;
          resolverLocation: string;
        }
      ] & {
        version: [number, number, string, string, string] & {
          major: number;
          minor: number;
          coreLocation: string;
          registrarLocation: string;
          resolverLocation: string;
        };
      }
    >;

    "getVersion(uint256)"(
      major: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [number, number, string, string, string] & {
          major: number;
          minor: number;
          coreLocation: string;
          registrarLocation: string;
          resolverLocation: string;
        }
      ] & {
        version: [number, number, string, string, string] & {
          major: number;
          minor: number;
          coreLocation: string;
          registrarLocation: string;
          resolverLocation: string;
        };
      }
    >;

    getVersionForAddress(
      contractAddress: string,
      contractType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [number, number, string, string, string] & {
          major: number;
          minor: number;
          coreLocation: string;
          registrarLocation: string;
          resolverLocation: string;
        }
      ]
    >;

    getVersionMajor(overrides?: CallOverrides): Promise<[BigNumber]>;

    getVersionMinor(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateMajor(
      coreContract: string,
      registrarContract: string,
      resolverContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateMinor(
      coreContract: string,
      registrarContract: string,
      resolverContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  getCurrentVersion(
    overrides?: CallOverrides
  ): Promise<
    [number, number, string, string, string] & {
      major: number;
      minor: number;
      coreLocation: string;
      registrarLocation: string;
      resolverLocation: string;
    }
  >;

  "getPhotochromicCore(uint256,uint256)"(
    major: BigNumberish,
    minor: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "getPhotochromicCore()"(overrides?: CallOverrides): Promise<string>;

  "getPhotochromicCore(uint256)"(
    major: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "getVersion(uint256,uint256)"(
    major: BigNumberish,
    minor: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [number, number, string, string, string] & {
      major: number;
      minor: number;
      coreLocation: string;
      registrarLocation: string;
      resolverLocation: string;
    }
  >;

  "getVersion(uint256)"(
    major: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [number, number, string, string, string] & {
      major: number;
      minor: number;
      coreLocation: string;
      registrarLocation: string;
      resolverLocation: string;
    }
  >;

  getVersionForAddress(
    contractAddress: string,
    contractType: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [number, number, string, string, string] & {
      major: number;
      minor: number;
      coreLocation: string;
      registrarLocation: string;
      resolverLocation: string;
    }
  >;

  getVersionMajor(overrides?: CallOverrides): Promise<BigNumber>;

  getVersionMinor(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateMajor(
    coreContract: string,
    registrarContract: string,
    resolverContract: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateMinor(
    coreContract: string,
    registrarContract: string,
    resolverContract: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getCurrentVersion(
      overrides?: CallOverrides
    ): Promise<
      [number, number, string, string, string] & {
        major: number;
        minor: number;
        coreLocation: string;
        registrarLocation: string;
        resolverLocation: string;
      }
    >;

    "getPhotochromicCore(uint256,uint256)"(
      major: BigNumberish,
      minor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "getPhotochromicCore()"(overrides?: CallOverrides): Promise<string>;

    "getPhotochromicCore(uint256)"(
      major: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "getVersion(uint256,uint256)"(
      major: BigNumberish,
      minor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [number, number, string, string, string] & {
        major: number;
        minor: number;
        coreLocation: string;
        registrarLocation: string;
        resolverLocation: string;
      }
    >;

    "getVersion(uint256)"(
      major: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [number, number, string, string, string] & {
        major: number;
        minor: number;
        coreLocation: string;
        registrarLocation: string;
        resolverLocation: string;
      }
    >;

    getVersionForAddress(
      contractAddress: string,
      contractType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [number, number, string, string, string] & {
        major: number;
        minor: number;
        coreLocation: string;
        registrarLocation: string;
        resolverLocation: string;
      }
    >;

    getVersionMajor(overrides?: CallOverrides): Promise<BigNumber>;

    getVersionMinor(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateMajor(
      coreContract: string,
      registrarContract: string,
      resolverContract: string,
      overrides?: CallOverrides
    ): Promise<
      [number, number, string, string, string] & {
        major: number;
        minor: number;
        coreLocation: string;
        registrarLocation: string;
        resolverLocation: string;
      }
    >;

    updateMinor(
      coreContract: string,
      registrarContract: string,
      resolverContract: string,
      overrides?: CallOverrides
    ): Promise<
      [number, number, string, string, string] & {
        major: number;
        minor: number;
        coreLocation: string;
        registrarLocation: string;
        resolverLocation: string;
      }
    >;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;
  };

  estimateGas: {
    getCurrentVersion(overrides?: CallOverrides): Promise<BigNumber>;

    "getPhotochromicCore(uint256,uint256)"(
      major: BigNumberish,
      minor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPhotochromicCore()"(overrides?: CallOverrides): Promise<BigNumber>;

    "getPhotochromicCore(uint256)"(
      major: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getVersion(uint256,uint256)"(
      major: BigNumberish,
      minor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getVersion(uint256)"(
      major: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVersionForAddress(
      contractAddress: string,
      contractType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVersionMajor(overrides?: CallOverrides): Promise<BigNumber>;

    getVersionMinor(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateMajor(
      coreContract: string,
      registrarContract: string,
      resolverContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateMinor(
      coreContract: string,
      registrarContract: string,
      resolverContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getCurrentVersion(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getPhotochromicCore(uint256,uint256)"(
      major: BigNumberish,
      minor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPhotochromicCore()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPhotochromicCore(uint256)"(
      major: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getVersion(uint256,uint256)"(
      major: BigNumberish,
      minor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getVersion(uint256)"(
      major: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVersionForAddress(
      contractAddress: string,
      contractType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVersionMajor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getVersionMinor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateMajor(
      coreContract: string,
      registrarContract: string,
      resolverContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateMinor(
      coreContract: string,
      registrarContract: string,
      resolverContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
