/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface PhotochromicResolverInterface extends ethers.utils.Interface {
  functions: {
    "ABI(bytes32,uint256)": FunctionFragment;
    "addr(bytes32)": FunctionFragment;
    "clearPCRecords(bytes32)": FunctionFragment;
    "contenthash(bytes32)": FunctionFragment;
    "deleteValidityInfo(bytes32)": FunctionFragment;
    "getValidityInfo(bytes32)": FunctionFragment;
    "interfaceImplementer(bytes32,bytes4)": FunctionFragment;
    "isValidNode(bytes32)": FunctionFragment;
    "lookup(string,string)": FunctionFragment;
    "multicall(bytes[])": FunctionFragment;
    "name(bytes32)": FunctionFragment;
    "owner()": FunctionFragment;
    "pubkey(bytes32)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "resolver(bytes32)": FunctionFragment;
    "setABI(bytes32,uint256,bytes)": FunctionFragment;
    "setAddr(bytes32,uint256,bytes)": FunctionFragment;
    "setContenthash(bytes32,bytes)": FunctionFragment;
    "setName(bytes32,string)": FunctionFragment;
    "setPCRecords(bytes32,string,string[5],address,string)": FunctionFragment;
    "setPubkey(bytes32,bytes32,bytes32)": FunctionFragment;
    "setResolver(bytes32,address)": FunctionFragment;
    "setText(bytes32,string,string)": FunctionFragment;
    "setValidatedAddrRecords(bytes32,tuple[])": FunctionFragment;
    "setValidatedRecords(bytes32,tuple[],tuple[])": FunctionFragment;
    "setValidatedTextRecords(bytes32,tuple[])": FunctionFragment;
    "setValidityInfo(bytes32,uint32,uint32)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "text(bytes32,string)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateExpiry(bytes32,uint32)": FunctionFragment;
    "updateLiveness(bytes32,uint32)": FunctionFragment;
    "validatedAddr(bytes32,uint256)": FunctionFragment;
    "validatedText(bytes32,string)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "ABI",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "addr", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "clearPCRecords",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "contenthash",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "deleteValidityInfo",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getValidityInfo",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "interfaceImplementer",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isValidNode",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "lookup",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "multicall",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(functionFragment: "name", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pubkey", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "resolver", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "setABI",
    values: [BytesLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setAddr",
    values: [BytesLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setContenthash",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setName",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setPCRecords",
    values: [
      BytesLike,
      string,
      [string, string, string, string, string],
      string,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setPubkey",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setResolver",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setText",
    values: [BytesLike, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setValidatedAddrRecords",
    values: [
      BytesLike,
      {
        coinType: BigNumberish;
        value: BytesLike;
        timestamp: BigNumberish;
        sig: { r: BytesLike; s: BytesLike; v: BigNumberish };
      }[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setValidatedRecords",
    values: [
      BytesLike,
      {
        key: string;
        value: string;
        timestamp: BigNumberish;
        sig: { r: BytesLike; s: BytesLike; v: BigNumberish };
      }[],
      {
        coinType: BigNumberish;
        value: BytesLike;
        timestamp: BigNumberish;
        sig: { r: BytesLike; s: BytesLike; v: BigNumberish };
      }[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setValidatedTextRecords",
    values: [
      BytesLike,
      {
        key: string;
        value: string;
        timestamp: BigNumberish;
        sig: { r: BytesLike; s: BytesLike; v: BigNumberish };
      }[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setValidityInfo",
    values: [BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "text",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateExpiry",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateLiveness",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "validatedAddr",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "validatedText",
    values: [BytesLike, string]
  ): string;

  decodeFunctionResult(functionFragment: "ABI", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addr", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "clearPCRecords",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contenthash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deleteValidityInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getValidityInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "interfaceImplementer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isValidNode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lookup", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "multicall", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pubkey", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "resolver", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setABI", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setAddr", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setContenthash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setName", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setPCRecords",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setPubkey", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setResolver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setText", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setValidatedAddrRecords",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setValidatedRecords",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setValidatedTextRecords",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setValidityInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "text", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateExpiry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateLiveness",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validatedAddr",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validatedText",
    data: BytesLike
  ): Result;

  events: {
    "ABIChanged(bytes32,uint256)": EventFragment;
    "AddrChanged(bytes32,address)": EventFragment;
    "AddressChanged(bytes32,uint256,bytes)": EventFragment;
    "ContenthashChanged(bytes32,bytes)": EventFragment;
    "InterfaceChanged(bytes32,bytes4,address)": EventFragment;
    "NameChanged(bytes32,string)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "PubkeyChanged(bytes32,bytes32,bytes32)": EventFragment;
    "TextChanged(bytes32,string,string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ABIChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AddrChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AddressChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ContenthashChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "InterfaceChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NameChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PubkeyChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TextChanged"): EventFragment;
}

export type ABIChangedEvent = TypedEvent<
  [string, BigNumber] & { node: string; contentType: BigNumber }
>;

export type AddrChangedEvent = TypedEvent<
  [string, string] & { node: string; a: string }
>;

export type AddressChangedEvent = TypedEvent<
  [string, BigNumber, string] & {
    node: string;
    coinType: BigNumber;
    newAddress: string;
  }
>;

export type ContenthashChangedEvent = TypedEvent<
  [string, string] & { node: string; hash: string }
>;

export type InterfaceChangedEvent = TypedEvent<
  [string, string, string] & {
    node: string;
    interfaceID: string;
    implementer: string;
  }
>;

export type NameChangedEvent = TypedEvent<
  [string, string] & { node: string; name: string }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type PubkeyChangedEvent = TypedEvent<
  [string, string, string] & { node: string; x: string; y: string }
>;

export type TextChangedEvent = TypedEvent<
  [string, string, string] & { node: string; indexedKey: string; key: string }
>;

export class PhotochromicResolver extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: PhotochromicResolverInterface;

  functions: {
    ABI(
      node: BytesLike,
      contentTypes: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, string]>;

    "addr(bytes32)"(
      node: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "addr(bytes32,uint256)"(
      node: BytesLike,
      coinType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    clearPCRecords(
      node: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    contenthash(node: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    deleteValidityInfo(
      node: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getValidityInfo(
      node: BytesLike,
      overrides?: CallOverrides
    ): Promise<[number, number]>;

    interfaceImplementer(
      node: BytesLike,
      interfaceID: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    isValidNode(node: BytesLike, overrides?: CallOverrides): Promise<[boolean]>;

    lookup(
      key: string,
      value: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    multicall(
      data: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    name(node: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pubkey(
      node: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string, string] & { x: string; y: string }>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    resolver(node: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    setABI(
      node: BytesLike,
      contentType: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setAddr(bytes32,uint256,bytes)"(
      node: BytesLike,
      coinType: BigNumberish,
      a: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setAddr(bytes32,address)"(
      node: BytesLike,
      a: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setContenthash(
      node: BytesLike,
      hash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setName(
      node: BytesLike,
      newName: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPCRecords(
      node: BytesLike,
      userId: string,
      contents: [string, string, string, string, string],
      sender: string,
      profile: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPubkey(
      node: BytesLike,
      x: BytesLike,
      y: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setResolver(
      node: BytesLike,
      _resolver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setText(
      node: BytesLike,
      key: string,
      value: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setValidatedAddrRecords(
      node: BytesLike,
      list: {
        coinType: BigNumberish;
        value: BytesLike;
        timestamp: BigNumberish;
        sig: { r: BytesLike; s: BytesLike; v: BigNumberish };
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setValidatedRecords(
      node: BytesLike,
      textRecords: {
        key: string;
        value: string;
        timestamp: BigNumberish;
        sig: { r: BytesLike; s: BytesLike; v: BigNumberish };
      }[],
      addressRecords: {
        coinType: BigNumberish;
        value: BytesLike;
        timestamp: BigNumberish;
        sig: { r: BytesLike; s: BytesLike; v: BigNumberish };
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setValidatedTextRecords(
      node: BytesLike,
      list: {
        key: string;
        value: string;
        timestamp: BigNumberish;
        sig: { r: BytesLike; s: BytesLike; v: BigNumberish };
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setValidityInfo(
      node: BytesLike,
      expiryTime: BigNumberish,
      livenessTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    text(
      node: BytesLike,
      key: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateExpiry(
      node: BytesLike,
      duration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateLiveness(
      node: BytesLike,
      livenessTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    validatedAddr(
      node: BytesLike,
      coinType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number, string, number]>;

    validatedText(
      node: BytesLike,
      key: string,
      overrides?: CallOverrides
    ): Promise<[number, string, number]>;
  };

  ABI(
    node: BytesLike,
    contentTypes: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, string]>;

  "addr(bytes32)"(node: BytesLike, overrides?: CallOverrides): Promise<string>;

  "addr(bytes32,uint256)"(
    node: BytesLike,
    coinType: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  clearPCRecords(
    node: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  contenthash(node: BytesLike, overrides?: CallOverrides): Promise<string>;

  deleteValidityInfo(
    node: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getValidityInfo(
    node: BytesLike,
    overrides?: CallOverrides
  ): Promise<[number, number]>;

  interfaceImplementer(
    node: BytesLike,
    interfaceID: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  isValidNode(node: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  lookup(
    key: string,
    value: string,
    overrides?: CallOverrides
  ): Promise<string>;

  multicall(
    data: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  name(node: BytesLike, overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  pubkey(
    node: BytesLike,
    overrides?: CallOverrides
  ): Promise<[string, string] & { x: string; y: string }>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  resolver(node: BytesLike, overrides?: CallOverrides): Promise<string>;

  setABI(
    node: BytesLike,
    contentType: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setAddr(bytes32,uint256,bytes)"(
    node: BytesLike,
    coinType: BigNumberish,
    a: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setAddr(bytes32,address)"(
    node: BytesLike,
    a: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setContenthash(
    node: BytesLike,
    hash: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setName(
    node: BytesLike,
    newName: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPCRecords(
    node: BytesLike,
    userId: string,
    contents: [string, string, string, string, string],
    sender: string,
    profile: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPubkey(
    node: BytesLike,
    x: BytesLike,
    y: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setResolver(
    node: BytesLike,
    _resolver: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setText(
    node: BytesLike,
    key: string,
    value: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setValidatedAddrRecords(
    node: BytesLike,
    list: {
      coinType: BigNumberish;
      value: BytesLike;
      timestamp: BigNumberish;
      sig: { r: BytesLike; s: BytesLike; v: BigNumberish };
    }[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setValidatedRecords(
    node: BytesLike,
    textRecords: {
      key: string;
      value: string;
      timestamp: BigNumberish;
      sig: { r: BytesLike; s: BytesLike; v: BigNumberish };
    }[],
    addressRecords: {
      coinType: BigNumberish;
      value: BytesLike;
      timestamp: BigNumberish;
      sig: { r: BytesLike; s: BytesLike; v: BigNumberish };
    }[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setValidatedTextRecords(
    node: BytesLike,
    list: {
      key: string;
      value: string;
      timestamp: BigNumberish;
      sig: { r: BytesLike; s: BytesLike; v: BigNumberish };
    }[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setValidityInfo(
    node: BytesLike,
    expiryTime: BigNumberish,
    livenessTime: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  text(
    node: BytesLike,
    key: string,
    overrides?: CallOverrides
  ): Promise<string>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateExpiry(
    node: BytesLike,
    duration: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateLiveness(
    node: BytesLike,
    livenessTime: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  validatedAddr(
    node: BytesLike,
    coinType: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[number, string, number]>;

  validatedText(
    node: BytesLike,
    key: string,
    overrides?: CallOverrides
  ): Promise<[number, string, number]>;

  callStatic: {
    ABI(
      node: BytesLike,
      contentTypes: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, string]>;

    "addr(bytes32)"(
      node: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "addr(bytes32,uint256)"(
      node: BytesLike,
      coinType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    clearPCRecords(node: BytesLike, overrides?: CallOverrides): Promise<void>;

    contenthash(node: BytesLike, overrides?: CallOverrides): Promise<string>;

    deleteValidityInfo(
      node: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    getValidityInfo(
      node: BytesLike,
      overrides?: CallOverrides
    ): Promise<[number, number]>;

    interfaceImplementer(
      node: BytesLike,
      interfaceID: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    isValidNode(node: BytesLike, overrides?: CallOverrides): Promise<boolean>;

    lookup(
      key: string,
      value: string,
      overrides?: CallOverrides
    ): Promise<string>;

    multicall(data: BytesLike[], overrides?: CallOverrides): Promise<string[]>;

    name(node: BytesLike, overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    pubkey(
      node: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string, string] & { x: string; y: string }>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    resolver(node: BytesLike, overrides?: CallOverrides): Promise<string>;

    setABI(
      node: BytesLike,
      contentType: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "setAddr(bytes32,uint256,bytes)"(
      node: BytesLike,
      coinType: BigNumberish,
      a: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "setAddr(bytes32,address)"(
      node: BytesLike,
      a: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setContenthash(
      node: BytesLike,
      hash: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setName(
      node: BytesLike,
      newName: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setPCRecords(
      node: BytesLike,
      userId: string,
      contents: [string, string, string, string, string],
      sender: string,
      profile: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setPubkey(
      node: BytesLike,
      x: BytesLike,
      y: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setResolver(
      node: BytesLike,
      _resolver: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setText(
      node: BytesLike,
      key: string,
      value: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setValidatedAddrRecords(
      node: BytesLike,
      list: {
        coinType: BigNumberish;
        value: BytesLike;
        timestamp: BigNumberish;
        sig: { r: BytesLike; s: BytesLike; v: BigNumberish };
      }[],
      overrides?: CallOverrides
    ): Promise<void>;

    setValidatedRecords(
      node: BytesLike,
      textRecords: {
        key: string;
        value: string;
        timestamp: BigNumberish;
        sig: { r: BytesLike; s: BytesLike; v: BigNumberish };
      }[],
      addressRecords: {
        coinType: BigNumberish;
        value: BytesLike;
        timestamp: BigNumberish;
        sig: { r: BytesLike; s: BytesLike; v: BigNumberish };
      }[],
      overrides?: CallOverrides
    ): Promise<void>;

    setValidatedTextRecords(
      node: BytesLike,
      list: {
        key: string;
        value: string;
        timestamp: BigNumberish;
        sig: { r: BytesLike; s: BytesLike; v: BigNumberish };
      }[],
      overrides?: CallOverrides
    ): Promise<void>;

    setValidityInfo(
      node: BytesLike,
      expiryTime: BigNumberish,
      livenessTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    text(
      node: BytesLike,
      key: string,
      overrides?: CallOverrides
    ): Promise<string>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateExpiry(
      node: BytesLike,
      duration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateLiveness(
      node: BytesLike,
      livenessTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    validatedAddr(
      node: BytesLike,
      coinType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number, string, number]>;

    validatedText(
      node: BytesLike,
      key: string,
      overrides?: CallOverrides
    ): Promise<[number, string, number]>;
  };

  filters: {
    "ABIChanged(bytes32,uint256)"(
      node?: BytesLike | null,
      contentType?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber],
      { node: string; contentType: BigNumber }
    >;

    ABIChanged(
      node?: BytesLike | null,
      contentType?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber],
      { node: string; contentType: BigNumber }
    >;

    "AddrChanged(bytes32,address)"(
      node?: BytesLike | null,
      a?: null
    ): TypedEventFilter<[string, string], { node: string; a: string }>;

    AddrChanged(
      node?: BytesLike | null,
      a?: null
    ): TypedEventFilter<[string, string], { node: string; a: string }>;

    "AddressChanged(bytes32,uint256,bytes)"(
      node?: BytesLike | null,
      coinType?: null,
      newAddress?: null
    ): TypedEventFilter<
      [string, BigNumber, string],
      { node: string; coinType: BigNumber; newAddress: string }
    >;

    AddressChanged(
      node?: BytesLike | null,
      coinType?: null,
      newAddress?: null
    ): TypedEventFilter<
      [string, BigNumber, string],
      { node: string; coinType: BigNumber; newAddress: string }
    >;

    "ContenthashChanged(bytes32,bytes)"(
      node?: BytesLike | null,
      hash?: null
    ): TypedEventFilter<[string, string], { node: string; hash: string }>;

    ContenthashChanged(
      node?: BytesLike | null,
      hash?: null
    ): TypedEventFilter<[string, string], { node: string; hash: string }>;

    "InterfaceChanged(bytes32,bytes4,address)"(
      node?: BytesLike | null,
      interfaceID?: BytesLike | null,
      implementer?: null
    ): TypedEventFilter<
      [string, string, string],
      { node: string; interfaceID: string; implementer: string }
    >;

    InterfaceChanged(
      node?: BytesLike | null,
      interfaceID?: BytesLike | null,
      implementer?: null
    ): TypedEventFilter<
      [string, string, string],
      { node: string; interfaceID: string; implementer: string }
    >;

    "NameChanged(bytes32,string)"(
      node?: BytesLike | null,
      name?: null
    ): TypedEventFilter<[string, string], { node: string; name: string }>;

    NameChanged(
      node?: BytesLike | null,
      name?: null
    ): TypedEventFilter<[string, string], { node: string; name: string }>;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "PubkeyChanged(bytes32,bytes32,bytes32)"(
      node?: BytesLike | null,
      x?: null,
      y?: null
    ): TypedEventFilter<
      [string, string, string],
      { node: string; x: string; y: string }
    >;

    PubkeyChanged(
      node?: BytesLike | null,
      x?: null,
      y?: null
    ): TypedEventFilter<
      [string, string, string],
      { node: string; x: string; y: string }
    >;

    "TextChanged(bytes32,string,string)"(
      node?: BytesLike | null,
      indexedKey?: string | null,
      key?: null
    ): TypedEventFilter<
      [string, string, string],
      { node: string; indexedKey: string; key: string }
    >;

    TextChanged(
      node?: BytesLike | null,
      indexedKey?: string | null,
      key?: null
    ): TypedEventFilter<
      [string, string, string],
      { node: string; indexedKey: string; key: string }
    >;
  };

  estimateGas: {
    ABI(
      node: BytesLike,
      contentTypes: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "addr(bytes32)"(
      node: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "addr(bytes32,uint256)"(
      node: BytesLike,
      coinType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    clearPCRecords(
      node: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    contenthash(node: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    deleteValidityInfo(
      node: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getValidityInfo(
      node: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    interfaceImplementer(
      node: BytesLike,
      interfaceID: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isValidNode(node: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    lookup(
      key: string,
      value: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    multicall(
      data: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    name(node: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pubkey(node: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    resolver(node: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    setABI(
      node: BytesLike,
      contentType: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setAddr(bytes32,uint256,bytes)"(
      node: BytesLike,
      coinType: BigNumberish,
      a: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setAddr(bytes32,address)"(
      node: BytesLike,
      a: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setContenthash(
      node: BytesLike,
      hash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setName(
      node: BytesLike,
      newName: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPCRecords(
      node: BytesLike,
      userId: string,
      contents: [string, string, string, string, string],
      sender: string,
      profile: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPubkey(
      node: BytesLike,
      x: BytesLike,
      y: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setResolver(
      node: BytesLike,
      _resolver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setText(
      node: BytesLike,
      key: string,
      value: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setValidatedAddrRecords(
      node: BytesLike,
      list: {
        coinType: BigNumberish;
        value: BytesLike;
        timestamp: BigNumberish;
        sig: { r: BytesLike; s: BytesLike; v: BigNumberish };
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setValidatedRecords(
      node: BytesLike,
      textRecords: {
        key: string;
        value: string;
        timestamp: BigNumberish;
        sig: { r: BytesLike; s: BytesLike; v: BigNumberish };
      }[],
      addressRecords: {
        coinType: BigNumberish;
        value: BytesLike;
        timestamp: BigNumberish;
        sig: { r: BytesLike; s: BytesLike; v: BigNumberish };
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setValidatedTextRecords(
      node: BytesLike,
      list: {
        key: string;
        value: string;
        timestamp: BigNumberish;
        sig: { r: BytesLike; s: BytesLike; v: BigNumberish };
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setValidityInfo(
      node: BytesLike,
      expiryTime: BigNumberish,
      livenessTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    text(
      node: BytesLike,
      key: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateExpiry(
      node: BytesLike,
      duration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateLiveness(
      node: BytesLike,
      livenessTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    validatedAddr(
      node: BytesLike,
      coinType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    validatedText(
      node: BytesLike,
      key: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ABI(
      node: BytesLike,
      contentTypes: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "addr(bytes32)"(
      node: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "addr(bytes32,uint256)"(
      node: BytesLike,
      coinType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    clearPCRecords(
      node: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    contenthash(
      node: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deleteValidityInfo(
      node: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getValidityInfo(
      node: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    interfaceImplementer(
      node: BytesLike,
      interfaceID: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isValidNode(
      node: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lookup(
      key: string,
      value: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    multicall(
      data: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    name(
      node: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pubkey(
      node: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    resolver(
      node: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setABI(
      node: BytesLike,
      contentType: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setAddr(bytes32,uint256,bytes)"(
      node: BytesLike,
      coinType: BigNumberish,
      a: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setAddr(bytes32,address)"(
      node: BytesLike,
      a: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setContenthash(
      node: BytesLike,
      hash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setName(
      node: BytesLike,
      newName: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPCRecords(
      node: BytesLike,
      userId: string,
      contents: [string, string, string, string, string],
      sender: string,
      profile: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPubkey(
      node: BytesLike,
      x: BytesLike,
      y: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setResolver(
      node: BytesLike,
      _resolver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setText(
      node: BytesLike,
      key: string,
      value: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setValidatedAddrRecords(
      node: BytesLike,
      list: {
        coinType: BigNumberish;
        value: BytesLike;
        timestamp: BigNumberish;
        sig: { r: BytesLike; s: BytesLike; v: BigNumberish };
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setValidatedRecords(
      node: BytesLike,
      textRecords: {
        key: string;
        value: string;
        timestamp: BigNumberish;
        sig: { r: BytesLike; s: BytesLike; v: BigNumberish };
      }[],
      addressRecords: {
        coinType: BigNumberish;
        value: BytesLike;
        timestamp: BigNumberish;
        sig: { r: BytesLike; s: BytesLike; v: BigNumberish };
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setValidatedTextRecords(
      node: BytesLike,
      list: {
        key: string;
        value: string;
        timestamp: BigNumberish;
        sig: { r: BytesLike; s: BytesLike; v: BigNumberish };
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setValidityInfo(
      node: BytesLike,
      expiryTime: BigNumberish,
      livenessTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    text(
      node: BytesLike,
      key: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateExpiry(
      node: BytesLike,
      duration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateLiveness(
      node: BytesLike,
      livenessTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    validatedAddr(
      node: BytesLike,
      coinType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    validatedText(
      node: BytesLike,
      key: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
