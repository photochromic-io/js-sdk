/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface AvatarSupportInterface extends ethers.utils.Interface {
  functions: {
    "addBluechipList(address[])": FunctionFragment;
    "bluechipCollectionList(address)": FunctionFragment;
    "fromHexChar(uint8)": FunctionFragment;
    "hexStringToAddress(string)": FunctionFragment;
    "holderCaip19(string)": FunctionFragment;
    "holdsAvatar(address,address,uint256)": FunctionFragment;
    "holdsAvatarCaip19(address,string)": FunctionFragment;
    "owner()": FunctionFragment;
    "removeBluechipList(address[])": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "strToUint(string)": FunctionFragment;
    "stringequals(string,string)": FunctionFragment;
    "substring(string,uint256,uint256)": FunctionFragment;
    "toAddress(string)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addBluechipList",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "bluechipCollectionList",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "fromHexChar",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "hexStringToAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "holderCaip19",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "holdsAvatar",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "holdsAvatarCaip19",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeBluechipList",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "strToUint", values: [string]): string;
  encodeFunctionData(
    functionFragment: "stringequals",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "substring",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "toAddress", values: [string]): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "addBluechipList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bluechipCollectionList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fromHexChar",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hexStringToAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "holderCaip19",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "holdsAvatar",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "holdsAvatarCaip19",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeBluechipList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "strToUint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stringequals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "substring", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "toAddress", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export class AvatarSupport extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: AvatarSupportInterface;

  functions: {
    addBluechipList(
      toAdd: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    bluechipCollectionList(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    fromHexChar(c: BigNumberish, overrides?: CallOverrides): Promise<[number]>;

    hexStringToAddress(s: string, overrides?: CallOverrides): Promise<[string]>;

    holderCaip19(caip19: string, overrides?: CallOverrides): Promise<[string]>;

    holdsAvatar(
      holder: string,
      nftContract: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;

    holdsAvatarCaip19(
      holder: string,
      caip19: string,
      overrides?: CallOverrides
    ): Promise<[number]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    removeBluechipList(
      toAdd: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    strToUint(
      str: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { res: BigNumber }>;

    stringequals(
      s1: string,
      s2: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    substring(
      str: string,
      startIndex: BigNumberish,
      endIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    toAddress(s: string, overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addBluechipList(
    toAdd: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  bluechipCollectionList(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  fromHexChar(c: BigNumberish, overrides?: CallOverrides): Promise<number>;

  hexStringToAddress(s: string, overrides?: CallOverrides): Promise<string>;

  holderCaip19(caip19: string, overrides?: CallOverrides): Promise<string>;

  holdsAvatar(
    holder: string,
    nftContract: string,
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  holdsAvatarCaip19(
    holder: string,
    caip19: string,
    overrides?: CallOverrides
  ): Promise<number>;

  owner(overrides?: CallOverrides): Promise<string>;

  removeBluechipList(
    toAdd: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  strToUint(str: string, overrides?: CallOverrides): Promise<BigNumber>;

  stringequals(
    s1: string,
    s2: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  substring(
    str: string,
    startIndex: BigNumberish,
    endIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  toAddress(s: string, overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addBluechipList(toAdd: string[], overrides?: CallOverrides): Promise<void>;

    bluechipCollectionList(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    fromHexChar(c: BigNumberish, overrides?: CallOverrides): Promise<number>;

    hexStringToAddress(s: string, overrides?: CallOverrides): Promise<string>;

    holderCaip19(caip19: string, overrides?: CallOverrides): Promise<string>;

    holdsAvatar(
      holder: string,
      nftContract: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    holdsAvatarCaip19(
      holder: string,
      caip19: string,
      overrides?: CallOverrides
    ): Promise<number>;

    owner(overrides?: CallOverrides): Promise<string>;

    removeBluechipList(
      toAdd: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    strToUint(str: string, overrides?: CallOverrides): Promise<BigNumber>;

    stringequals(
      s1: string,
      s2: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    substring(
      str: string,
      startIndex: BigNumberish,
      endIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    toAddress(s: string, overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;
  };

  estimateGas: {
    addBluechipList(
      toAdd: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    bluechipCollectionList(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fromHexChar(c: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    hexStringToAddress(
      s: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    holderCaip19(caip19: string, overrides?: CallOverrides): Promise<BigNumber>;

    holdsAvatar(
      holder: string,
      nftContract: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    holdsAvatarCaip19(
      holder: string,
      caip19: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    removeBluechipList(
      toAdd: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    strToUint(str: string, overrides?: CallOverrides): Promise<BigNumber>;

    stringequals(
      s1: string,
      s2: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    substring(
      str: string,
      startIndex: BigNumberish,
      endIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    toAddress(s: string, overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addBluechipList(
      toAdd: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    bluechipCollectionList(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fromHexChar(
      c: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hexStringToAddress(
      s: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    holderCaip19(
      caip19: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    holdsAvatar(
      holder: string,
      nftContract: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    holdsAvatarCaip19(
      holder: string,
      caip19: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeBluechipList(
      toAdd: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    strToUint(
      str: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stringequals(
      s1: string,
      s2: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    substring(
      str: string,
      startIndex: BigNumberish,
      endIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    toAddress(
      s: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
