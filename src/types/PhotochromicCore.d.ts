/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface PhotochromicCoreInterface extends ethers.utils.Interface {
  functions: {
    "available(bytes32)": FunctionFragment;
    "burn(string)": FunctionFragment;
    "burnTicket(bytes32)": FunctionFragment;
    "clearRecords()": FunctionFragment;
    "ens()": FunctionFragment;
    "getPrice(string,uint256)": FunctionFragment;
    "getProfileNames()": FunctionFragment;
    "getSocialsAmount(string)": FunctionFragment;
    "getTicketAddress(bytes32)": FunctionFragment;
    "getTicketProfile()": FunctionFragment;
    "getTicketUserId()": FunctionFragment;
    "getValidityInfo(bytes32)": FunctionFragment;
    "gracePeriod()": FunctionFragment;
    "isValidTicket(bytes32,address)": FunctionFragment;
    "lastLiveness(bytes32)": FunctionFragment;
    "mint((uint32,string[5],string,bytes32,(bytes32,bytes32,uint8)),tuple[],tuple[],string)": FunctionFragment;
    "owner()": FunctionFragment;
    "photochromicSignerAddress()": FunctionFragment;
    "pricePerYear()": FunctionFragment;
    "profiles(uint256)": FunctionFragment;
    "purchase(string,string,uint256)": FunctionFragment;
    "registrar()": FunctionFragment;
    "renew(bytes32,uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "resolver()": FunctionFragment;
    "setGracePeriod(uint256)": FunctionFragment;
    "setPricePerYear(uint256)": FunctionFragment;
    "setProfiles(tuple[])": FunctionFragment;
    "setResolverOwner(address)": FunctionFragment;
    "setTicketValidity(uint256)": FunctionFragment;
    "ticketValidity()": FunctionFragment;
    "transferBalance(uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateLiveness(bytes32,uint32,(bytes32,bytes32,uint8))": FunctionFragment;
    "updateSignerAddress(address)": FunctionFragment;
    "upgradeResolver(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "available",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "burn", values: [string]): string;
  encodeFunctionData(
    functionFragment: "burnTicket",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "clearRecords",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "ens", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getPrice",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getProfileNames",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSocialsAmount",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getTicketAddress",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTicketProfile",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTicketUserId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getValidityInfo",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "gracePeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isValidTicket",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "lastLiveness",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [
      {
        livenessTime: BigNumberish;
        contents: [string, string, string, string, string];
        userId: string;
        ipfsHash: BytesLike;
        sig: { r: BytesLike; s: BytesLike; v: BigNumberish };
      },
      {
        key: string;
        value: string;
        timestamp: BigNumberish;
        sig: { r: BytesLike; s: BytesLike; v: BigNumberish };
      }[],
      {
        coinType: BigNumberish;
        value: BytesLike;
        timestamp: BigNumberish;
        sig: { r: BytesLike; s: BytesLike; v: BigNumberish };
      }[],
      string
    ]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "photochromicSignerAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pricePerYear",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "profiles",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "purchase",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "registrar", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renew",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "resolver", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setGracePeriod",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPricePerYear",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setProfiles",
    values: [{ name: string; price: BigNumberish; info: BigNumberish }[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setResolverOwner",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setTicketValidity",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "ticketValidity",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferBalance",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateLiveness",
    values: [
      BytesLike,
      BigNumberish,
      { r: BytesLike; s: BytesLike; v: BigNumberish }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateSignerAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeResolver",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "available", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burnTicket", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "clearRecords",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ens", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getProfileNames",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSocialsAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTicketAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTicketProfile",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTicketUserId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getValidityInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "gracePeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isValidTicket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastLiveness",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "photochromicSignerAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pricePerYear",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "profiles", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "purchase", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "registrar", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "renew", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "resolver", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setGracePeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPricePerYear",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProfiles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setResolverOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTicketValidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ticketValidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateLiveness",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateSignerAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeResolver",
    data: BytesLike
  ): Result;

  events: {
    "NameRegistered(uint256,address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Ticket(address,bytes32,string,string,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "NameRegistered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Ticket"): EventFragment;
}

export type NameRegisteredEvent = TypedEvent<
  [BigNumber, string, BigNumber] & {
    id: BigNumber;
    owner: string;
    expires: BigNumber;
  }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type TicketEvent = TypedEvent<
  [string, string, string, string, BigNumber, BigNumber] & {
    user: string;
    node: string;
    userId: string;
    profile: string;
    yrs: BigNumber;
    timestamp: BigNumber;
  }
>;

export class PhotochromicCore extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: PhotochromicCoreInterface;

  functions: {
    available(node: BytesLike, overrides?: CallOverrides): Promise<[boolean]>;

    burn(
      userId: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    burnTicket(
      node: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    clearRecords(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    ens(overrides?: CallOverrides): Promise<[string]>;

    getPrice(
      profile: string,
      yrs: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getProfileNames(overrides?: CallOverrides): Promise<[string[]]>;

    getSocialsAmount(
      profile: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTicketAddress(
      node: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getTicketProfile(
      overrides?: CallOverrides
    ): Promise<[string, number] & { profile: string; yrs: number }>;

    "getTicketUserId()"(
      overrides?: CallOverrides
    ): Promise<[string] & { userId: string }>;

    "getTicketUserId(address)"(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<[string] & { userId: string }>;

    getValidityInfo(
      node: BytesLike,
      overrides?: CallOverrides
    ): Promise<[number, number]>;

    gracePeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    isValidTicket(
      node: BytesLike,
      requester: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    lastLiveness(node: BytesLike, overrides?: CallOverrides): Promise<[number]>;

    mint(
      data: {
        livenessTime: BigNumberish;
        contents: [string, string, string, string, string];
        userId: string;
        ipfsHash: BytesLike;
        sig: { r: BytesLike; s: BytesLike; v: BigNumberish };
      },
      texts: {
        key: string;
        value: string;
        timestamp: BigNumberish;
        sig: { r: BytesLike; s: BytesLike; v: BigNumberish };
      }[],
      addrs: {
        coinType: BigNumberish;
        value: BytesLike;
        timestamp: BigNumberish;
        sig: { r: BytesLike; s: BytesLike; v: BigNumberish };
      }[],
      avatar: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    photochromicSignerAddress(overrides?: CallOverrides): Promise<[string]>;

    pricePerYear(overrides?: CallOverrides): Promise<[BigNumber]>;

    profiles(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber] & {
        name: string;
        price: BigNumber;
        info: BigNumber;
      }
    >;

    purchase(
      userId: string,
      profile: string,
      yrs: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    registrar(overrides?: CallOverrides): Promise<[string]>;

    renew(
      node: BytesLike,
      yrs: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    resolver(overrides?: CallOverrides): Promise<[string]>;

    setGracePeriod(
      newGracePeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPricePerYear(
      newPricePerYear: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setProfiles(
      newProfiles: { name: string; price: BigNumberish; info: BigNumberish }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setResolverOwner(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTicketValidity(
      newTicketValidity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    ticketValidity(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferBalance(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateLiveness(
      node: BytesLike,
      livenessTime: BigNumberish,
      sig: { r: BytesLike; s: BytesLike; v: BigNumberish },
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateSignerAddress(
      newPhotochromicSignerAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgradeResolver(
      newResolver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  available(node: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  burn(
    userId: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  burnTicket(
    node: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  clearRecords(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  ens(overrides?: CallOverrides): Promise<string>;

  getPrice(
    profile: string,
    yrs: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getProfileNames(overrides?: CallOverrides): Promise<string[]>;

  getSocialsAmount(
    profile: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTicketAddress(node: BytesLike, overrides?: CallOverrides): Promise<string>;

  getTicketProfile(
    overrides?: CallOverrides
  ): Promise<[string, number] & { profile: string; yrs: number }>;

  "getTicketUserId()"(overrides?: CallOverrides): Promise<string>;

  "getTicketUserId(address)"(
    userAddress: string,
    overrides?: CallOverrides
  ): Promise<string>;

  getValidityInfo(
    node: BytesLike,
    overrides?: CallOverrides
  ): Promise<[number, number]>;

  gracePeriod(overrides?: CallOverrides): Promise<BigNumber>;

  isValidTicket(
    node: BytesLike,
    requester: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  lastLiveness(node: BytesLike, overrides?: CallOverrides): Promise<number>;

  mint(
    data: {
      livenessTime: BigNumberish;
      contents: [string, string, string, string, string];
      userId: string;
      ipfsHash: BytesLike;
      sig: { r: BytesLike; s: BytesLike; v: BigNumberish };
    },
    texts: {
      key: string;
      value: string;
      timestamp: BigNumberish;
      sig: { r: BytesLike; s: BytesLike; v: BigNumberish };
    }[],
    addrs: {
      coinType: BigNumberish;
      value: BytesLike;
      timestamp: BigNumberish;
      sig: { r: BytesLike; s: BytesLike; v: BigNumberish };
    }[],
    avatar: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  photochromicSignerAddress(overrides?: CallOverrides): Promise<string>;

  pricePerYear(overrides?: CallOverrides): Promise<BigNumber>;

  profiles(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber] & {
      name: string;
      price: BigNumber;
      info: BigNumber;
    }
  >;

  purchase(
    userId: string,
    profile: string,
    yrs: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  registrar(overrides?: CallOverrides): Promise<string>;

  renew(
    node: BytesLike,
    yrs: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  resolver(overrides?: CallOverrides): Promise<string>;

  setGracePeriod(
    newGracePeriod: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPricePerYear(
    newPricePerYear: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setProfiles(
    newProfiles: { name: string; price: BigNumberish; info: BigNumberish }[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setResolverOwner(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTicketValidity(
    newTicketValidity: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  ticketValidity(overrides?: CallOverrides): Promise<BigNumber>;

  transferBalance(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateLiveness(
    node: BytesLike,
    livenessTime: BigNumberish,
    sig: { r: BytesLike; s: BytesLike; v: BigNumberish },
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateSignerAddress(
    newPhotochromicSignerAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgradeResolver(
    newResolver: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    available(node: BytesLike, overrides?: CallOverrides): Promise<boolean>;

    burn(userId: string, overrides?: CallOverrides): Promise<void>;

    burnTicket(node: BytesLike, overrides?: CallOverrides): Promise<void>;

    clearRecords(overrides?: CallOverrides): Promise<void>;

    ens(overrides?: CallOverrides): Promise<string>;

    getPrice(
      profile: string,
      yrs: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProfileNames(overrides?: CallOverrides): Promise<string[]>;

    getSocialsAmount(
      profile: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTicketAddress(
      node: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    getTicketProfile(
      overrides?: CallOverrides
    ): Promise<[string, number] & { profile: string; yrs: number }>;

    "getTicketUserId()"(overrides?: CallOverrides): Promise<string>;

    "getTicketUserId(address)"(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<string>;

    getValidityInfo(
      node: BytesLike,
      overrides?: CallOverrides
    ): Promise<[number, number]>;

    gracePeriod(overrides?: CallOverrides): Promise<BigNumber>;

    isValidTicket(
      node: BytesLike,
      requester: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    lastLiveness(node: BytesLike, overrides?: CallOverrides): Promise<number>;

    mint(
      data: {
        livenessTime: BigNumberish;
        contents: [string, string, string, string, string];
        userId: string;
        ipfsHash: BytesLike;
        sig: { r: BytesLike; s: BytesLike; v: BigNumberish };
      },
      texts: {
        key: string;
        value: string;
        timestamp: BigNumberish;
        sig: { r: BytesLike; s: BytesLike; v: BigNumberish };
      }[],
      addrs: {
        coinType: BigNumberish;
        value: BytesLike;
        timestamp: BigNumberish;
        sig: { r: BytesLike; s: BytesLike; v: BigNumberish };
      }[],
      avatar: string,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    photochromicSignerAddress(overrides?: CallOverrides): Promise<string>;

    pricePerYear(overrides?: CallOverrides): Promise<BigNumber>;

    profiles(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber] & {
        name: string;
        price: BigNumber;
        info: BigNumber;
      }
    >;

    purchase(
      userId: string,
      profile: string,
      yrs: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    registrar(overrides?: CallOverrides): Promise<string>;

    renew(
      node: BytesLike,
      yrs: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    resolver(overrides?: CallOverrides): Promise<string>;

    setGracePeriod(
      newGracePeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setPricePerYear(
      newPricePerYear: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setProfiles(
      newProfiles: { name: string; price: BigNumberish; info: BigNumberish }[],
      overrides?: CallOverrides
    ): Promise<void>;

    setResolverOwner(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setTicketValidity(
      newTicketValidity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    ticketValidity(overrides?: CallOverrides): Promise<BigNumber>;

    transferBalance(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateLiveness(
      node: BytesLike,
      livenessTime: BigNumberish,
      sig: { r: BytesLike; s: BytesLike; v: BigNumberish },
      overrides?: CallOverrides
    ): Promise<void>;

    updateSignerAddress(
      newPhotochromicSignerAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeResolver(
      newResolver: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "NameRegistered(uint256,address,uint256)"(
      id?: BigNumberish | null,
      owner?: string | null,
      expires?: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber],
      { id: BigNumber; owner: string; expires: BigNumber }
    >;

    NameRegistered(
      id?: BigNumberish | null,
      owner?: string | null,
      expires?: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber],
      { id: BigNumber; owner: string; expires: BigNumber }
    >;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "Ticket(address,bytes32,string,string,uint256,uint256)"(
      user?: string | null,
      node?: null,
      userId?: null,
      profile?: null,
      yrs?: null,
      timestamp?: null
    ): TypedEventFilter<
      [string, string, string, string, BigNumber, BigNumber],
      {
        user: string;
        node: string;
        userId: string;
        profile: string;
        yrs: BigNumber;
        timestamp: BigNumber;
      }
    >;

    Ticket(
      user?: string | null,
      node?: null,
      userId?: null,
      profile?: null,
      yrs?: null,
      timestamp?: null
    ): TypedEventFilter<
      [string, string, string, string, BigNumber, BigNumber],
      {
        user: string;
        node: string;
        userId: string;
        profile: string;
        yrs: BigNumber;
        timestamp: BigNumber;
      }
    >;
  };

  estimateGas: {
    available(node: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    burn(
      userId: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    burnTicket(
      node: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    clearRecords(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    ens(overrides?: CallOverrides): Promise<BigNumber>;

    getPrice(
      profile: string,
      yrs: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProfileNames(overrides?: CallOverrides): Promise<BigNumber>;

    getSocialsAmount(
      profile: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTicketAddress(
      node: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTicketProfile(overrides?: CallOverrides): Promise<BigNumber>;

    "getTicketUserId()"(overrides?: CallOverrides): Promise<BigNumber>;

    "getTicketUserId(address)"(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getValidityInfo(
      node: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    gracePeriod(overrides?: CallOverrides): Promise<BigNumber>;

    isValidTicket(
      node: BytesLike,
      requester: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lastLiveness(
      node: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mint(
      data: {
        livenessTime: BigNumberish;
        contents: [string, string, string, string, string];
        userId: string;
        ipfsHash: BytesLike;
        sig: { r: BytesLike; s: BytesLike; v: BigNumberish };
      },
      texts: {
        key: string;
        value: string;
        timestamp: BigNumberish;
        sig: { r: BytesLike; s: BytesLike; v: BigNumberish };
      }[],
      addrs: {
        coinType: BigNumberish;
        value: BytesLike;
        timestamp: BigNumberish;
        sig: { r: BytesLike; s: BytesLike; v: BigNumberish };
      }[],
      avatar: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    photochromicSignerAddress(overrides?: CallOverrides): Promise<BigNumber>;

    pricePerYear(overrides?: CallOverrides): Promise<BigNumber>;

    profiles(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    purchase(
      userId: string,
      profile: string,
      yrs: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    registrar(overrides?: CallOverrides): Promise<BigNumber>;

    renew(
      node: BytesLike,
      yrs: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    resolver(overrides?: CallOverrides): Promise<BigNumber>;

    setGracePeriod(
      newGracePeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPricePerYear(
      newPricePerYear: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setProfiles(
      newProfiles: { name: string; price: BigNumberish; info: BigNumberish }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setResolverOwner(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTicketValidity(
      newTicketValidity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    ticketValidity(overrides?: CallOverrides): Promise<BigNumber>;

    transferBalance(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateLiveness(
      node: BytesLike,
      livenessTime: BigNumberish,
      sig: { r: BytesLike; s: BytesLike; v: BigNumberish },
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateSignerAddress(
      newPhotochromicSignerAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgradeResolver(
      newResolver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    available(
      node: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    burn(
      userId: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    burnTicket(
      node: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    clearRecords(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    ens(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPrice(
      profile: string,
      yrs: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProfileNames(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getSocialsAmount(
      profile: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTicketAddress(
      node: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTicketProfile(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getTicketUserId()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getTicketUserId(address)"(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getValidityInfo(
      node: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    gracePeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isValidTicket(
      node: BytesLike,
      requester: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastLiveness(
      node: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mint(
      data: {
        livenessTime: BigNumberish;
        contents: [string, string, string, string, string];
        userId: string;
        ipfsHash: BytesLike;
        sig: { r: BytesLike; s: BytesLike; v: BigNumberish };
      },
      texts: {
        key: string;
        value: string;
        timestamp: BigNumberish;
        sig: { r: BytesLike; s: BytesLike; v: BigNumberish };
      }[],
      addrs: {
        coinType: BigNumberish;
        value: BytesLike;
        timestamp: BigNumberish;
        sig: { r: BytesLike; s: BytesLike; v: BigNumberish };
      }[],
      avatar: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    photochromicSignerAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pricePerYear(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    profiles(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    purchase(
      userId: string,
      profile: string,
      yrs: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    registrar(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renew(
      node: BytesLike,
      yrs: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    resolver(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setGracePeriod(
      newGracePeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPricePerYear(
      newPricePerYear: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setProfiles(
      newProfiles: { name: string; price: BigNumberish; info: BigNumberish }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setResolverOwner(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTicketValidity(
      newTicketValidity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    ticketValidity(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferBalance(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateLiveness(
      node: BytesLike,
      livenessTime: BigNumberish,
      sig: { r: BytesLike; s: BytesLike; v: BigNumberish },
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateSignerAddress(
      newPhotochromicSignerAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgradeResolver(
      newResolver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
